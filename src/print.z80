include "macros.inc"

export _print_byte
export print_byte
export _print_bits
export print_bits
export _print_string
export print_string
export _vprintf
export _printf

section "print functions", ROMX
; _print_byte
; 
; description:
; print a byte
; 
; c function signiature:
; int print_byte(unsigned char);
;
; input:
; - `a` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
_print_byte:
	; fallthrough

; print_byte
;
; input:
; - `a` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
print_byte:
	ld c, $0f
	ld h, HIGH(hex_map)
	ld b, a

	and c
	ld l, a
	push hl

	ld a, b
	swap a
	and c
	ld l, a
	ld a, [hl]

	call putchar

	pop hl
	ld a, [hl]

	call putchar

	ld bc, 2
	ret
; print_byte
; _print_byte


; print_non_zero_nibbles
; 
; description:
; print byte without leading zero nibbles
;
; input:
; - `a` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
print_non_zero_nibbles:
	ld c, $0f
	ld h, HIGH(hex_map)
	ld b, a

	and c
	ld l, a
	push hl

	ld a, b
	swap a
	and c
	ld l, a
	ld a, [hl]

	call nz, putchar

	pop hl
	ld a, [hl]

	call putchar

	; TODO: return correct number of characters written
	ld bc, 1
	ret
; print_non_zero_nibbles


; _print_bits
; 
; description:
; print 8 bits
; 
; c function signiature:
; int print_bits(unsigned char);
;
; input:
; - `a` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
_print_bits:
	; fallthrough

; print_bits
;
; input:
; - `a` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
print_bits:
	ld h, a
	ld l, 8
	
	.loop
		xor a
		sla h
		adc "0"

		push hl
		call putchar
		pop hl

		dec l
	jr nz, .loop

	; TODO: return correct number of characters written
	ld bc, 8
	ret
; print_bits
; _print_bits


; print_non_zero_bits
; 
; description:
; print bits without leading zero bits
;
; input:
; - `a` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
print_non_zero_bits:
	ld h, a
	ld l, 8

	.discard_leading_zeros_loop
		dec l
		sla h
	jr nc, .discard_leading_zeros_loop

	rr h
	
	.print_loop
		xor a
		sla h
		adc "0"

		push hl
		call putchar
		pop hl
			
		dec l
	jr nz, .print_loop

	xor a
	sla h
	adc "0"
	call putchar

	; TODO: return correct number of characters written
	ld bc, 8
	ret
; print_non_zero_bits


; _print_hex
; 
; description:
; print a hexadecimal integer,
; leading zero nibbles are ignored
;
; c function signiature:
; int print_hex(unsigned int);
;
; input:
; - `de` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
_print_hex:
	; fallthrough

; print_hex
;
; input:
; - `de` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
print_hex:
	ld a, d
	or a
	jr z, .ignore_upper_bits
		push de
		call print_non_zero_nibbles
		pop de

		ld a, e
		call print_byte

		; TODO: return correct number of characters written
		ld bc, 3 ; or 4
		ret
	.ignore_upper_bits

	ld a, e
	call print_non_zero_nibbles

	; TODO: return correct number of characters written
	ld bc, 1 ; or 2
	ret
; print_hex
; _print_hex


; _print_hexl
; 
; description:
; print a hexadecimal long integer,
; leading zero nibbles are ignored
;
; c function signiature:
; int print_hexl(unsigned long);
;
; input:
; - `debc` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
_print_hexl:
	; fallthrough

; print_hexl
;
; input:
; - `debc` : value
;
; returns:
; - `bc` : number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
print_hexl:
	ld a, d
	or e
	jr z, .ignore_upper_bits
		push bc
		call print_hex
		pop de

		call print_hex

		; TODO: return correct number of characters written
		ld bc, 5 ; to 8
		ret
	.ignore_upper_bits

	ld d, b
	ld e, c
	jp print_hex
; print_hexl
; _print_hexl


; _print_string
;
; c function signiature:
; int print_string(const char*);
;
; input:
; - `de` : string ptr
;
; returns:
; - `bc` : TODO: number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
_print_string:
	LD_R16_R16 hl, de
	; fallthrough

; print_string
;
; input:
; - `hl` : string ptr
;
; returns:
; - `bc` : TODO: number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
print_string:
	ld a, [hli]
	or a
	ret z

	push hl
	call putchar
	pop hl
	jr print_string
; print_string
; _print_string


; _vprintf
;
; c function signiature:
; int printf(const char*, va_list);
;
; input:
; - `de` : fmt string ptr
; - `bc` : variable arguments list ptr
;
; returns:
; - `bc` : TODO: number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
_vprintf:
	ld h, d
	ld l, e

	.loop
	ld a, [hli]

	or a
	ret z ; , .exit
	
	cp "%"
	jr z, .fmt_specifier

	push hl
	push bc
	call putchar
	pop bc
	pop hl
	jr .loop
	
	.fmt_specifier
	ld a, [hli]

	or a
	ret z ; , .exit

	cp "0"
	jr z, .fmt_specifier ; 0 Padding is not supported, ignore

	sub "1"
	cp 9
	jr c, .fmt_specifier ; Width Specifier is not supported, ignore 1 digit worth
	add "1"

	cp "s"
	jr nz, .not_s
		push hl

		ld a, [bc]
		ld l, a
		inc bc
		ld a, [bc]
		ld h, a
		inc bc
		
		push bc
		call print_string
		pop bc

		pop hl
		jr .loop
	.not_s

	cp "x"
	jr nz, .not_x
		push hl

		ld a, [bc]
		ld e, a
		inc bc
		ld a, [bc]
		ld d, a
		inc bc

		push bc

		call print_hex

		pop bc

		pop hl
		jr .loop
	.not_x
	
	cp "c"
	jr nz, .not_c
		push hl
		
		ld a, [bc]
		inc bc
		inc bc
		
		push bc
		call putchar
		pop bc

		pop hl
		jr .loop 
	.not_c

	cp "u"
	jr nz, .not_u
		push hl

		ld a, [bc]
		ld e, a
		inc bc
		ld a, [bc]
		ld d, a
		inc bc
		
		push bc

		call _bcd

		call print_hexl

		pop bc

		pop hl
		jp .loop 
	.not_u

	cp "d"
	jr nz, .not_d
		push hl

		ld a, [bc]
		ld e, a
		inc bc
		ld a, [bc]
		ld d, a
		inc bc

		push bc

		cp $80
		jr c, .positive
			push de
			ld a, "-"
			call putchar
			pop de

			TWOS_COMPLEMENT_R16 de
		.positive

		call _bcd

		call print_hexl

		pop bc

		pop hl
		jp .loop 
	.not_d

	cp "b"
	jr nz, .not_b
		push hl

		ld a, [bc]
		ld e, a
		inc bc
		ld a, [bc]
		ld d, a
		inc bc

		push bc

		; ld a, d
		or a
		jr z, .ignore_upper_bits
			push de
			call print_non_zero_bits
			pop de
	
			ld a, e
			call print_bits
	
			pop bc

			pop hl
			jp .loop
		.ignore_upper_bits
	
		ld a, e
		call print_non_zero_bits

		pop bc

		pop hl
		jp .loop
	.not_b

	push hl
	push bc
	call putchar
	pop bc
	pop hl
	jp .loop
; _vprintf


; _printf
;
; c function signiature:
; int printf(const char*, ...);
;
; input:
; - stack : fmt string ptr, variable arguments
;
; returns:
; - `bc` : TODO: number of characters written
;
; destroys `af`, `bc`, `de`, `hl`
_printf:
	ld	hl, sp+4 ; variable arguments list ptr
	ld	c, l
	ld	b, h
	
	ld	hl, sp+2 ; format string ptr ptr
	ld	e, [hl]
	inc	hl
	ld	d, [hl]
	jp	_vprintf
; _printf
