include "keyboard.inc"
include "input.inc"
include "debug.inc"

export processing_keyboard_input
export keyboard_scan_code_state
export keyboard_modifiers
export keyboard_locking_modifiers
export keyboard_input_buffer_read_ptr
export keyboard_input_buffer_write_ptr
export keyboard_input_buffer

export init_keyboard_mem

export keyboard_get_packet
export keyboard_packet_to_scan_code
export keyboard_scan_code_to_keycode
export keyboard_keycode_to_input_buffer_chars

section "keyboard variables", wramx
processing_keyboard_input: 			ds 1
keyboard_scan_code_state: 			ds 1
keyboard_modifiers: 				ds 1
keyboard_locking_modifiers: 		ds 1
keyboard_input_buffer_read_ptr: 	ds 1
keyboard_input_buffer_write_ptr: 	ds 1

section "keyboard intput buffer", wramx, align[8, 256 - KEYBOARD_INPUT_BUFFER_SIZE]
keyboard_input_buffer: 		ds KEYBOARD_INPUT_BUFFER_SIZE
keyboard_input_buffer_end:
assert fail, (high(keyboard_input_buffer) == high(keyboard_input_buffer_end - 1)), "keyboard_input_buffer crossed a 256 byte boundary"

section "nibble bit count lookup table", romx, align[8]
nibble_bit_count_lookup_table:
	db 	0, 1, 1, 2, 1, 2, 2, 3, \
		1, 2, 2, 3, 2, 3, 3, 4

section "nibble reverse bits lookup table", romx, align[8]
nibble_reverse_bits_lookup_table:
	db 	$0, $8, $4, $c, $2, $a, $6, $e, \
		$1, $9, $5, $d, $3, $b, $7, $f

section "keyboard functions", romx
; init_keyboard_mem
init_keyboard_mem:
	xor a
	ld [processing_keyboard_input], a
	ld [keyboard_scan_code_state], a
	ld [keyboard_modifiers], a
	ld [keyboard_locking_modifiers], a

	ld a, low(keyboard_input_buffer)
	ld [keyboard_input_buffer_read_ptr], a
	ld [keyboard_input_buffer_write_ptr], a
	ret
; init_keyboard_mem


; keyboard_get_packet.pause
	keyboard_get_packet.pause
	halt
	nop ; halt bug
	; fallthrough

; keyboard_get_packet
;
; returns:
; - `de` : packet
;
; destroys `af`, `hl`
keyboard_get_packet:
	KEYBOARD_INPUT_BUFFER_UNREAD d
	cp 2
	jr c, .pause

	KEYBOARD_INPUT_BUFFER_POP d
	KEYBOARD_INPUT_BUFFER_POP e
	ret
; keyboard_get_packet


; keyboard_packet_to_scan_code
;
; input:
; - `de` : packet = %0ddddddd %00000dp1
;
; where:
; 	bits are in reverse order,
; 	start bit = always 0,
; 	d = data bit,
; 	5 times 0 bit for padding of 11 bit packet,
; 	p = odd parity bit,
; 	stop bit = always 1
;
; returns:
; - `a` : scan code, 0 means broken packet
;
; modifies `af`, `c`, `de`
keyboard_packet_to_scan_code:
	;      s0123456
	; d = %0ddddddd
	;           7 s
	; e = %00000dp1

				;        7
	sra e 		; %000000dp, c=s1
	DPUTSCJP nc, "keyboard: stop bit was not one"
	jr nc, .broken_packet

				;         7
	sra e 		; %0000000d, c=p
	rr e 		; %p0000000, c=d7

				;  01234567
	rl d 		; %dddddddd, c=s0
	DPUTSCJP c, "keyboard: start bit was not zero"
	jr c, .broken_packet

	sla e 		; %00000000, c=p
	DPUTSCJP nz, "keyboard: padding was non zero"
	jr nz, .broken_packet

	ccf 		; flip parity bit
	rl e 		; %0000000p, c=0

	; parity check
	ld h, high(nibble_bit_count_lookup_table)
	ld a, d	
	and $0f
	ld l, a
	ld c, [hl] 	; low nibble bit count

	ld a, d
	swap a
	and $0f
	ld l, a
	ld a, [hl] 	; high nibble bit count
	add c 		; bit count
	and 1 		; bit 0 should be the same as parity bit,
	cp e 		;   because of odd parity and it was flipped earlier
	DPUTSCJP nz, "keyboard: parity bit was wrong"
	jr nz, .broken_packet
	; parity check

	;  01234567
	; %dddddddd
	ld h, high(nibble_reverse_bits_lookup_table)
	ld a, d
	and $0f 	; low nibble
	ld l, a
	ld a, d
	ld d, [hl] 	; reverse low nibble
	swap d 		; low -> high nibble
	swap a 		; high -> low nibble
	and $0f 	; low nibble
	ld l, a
	ld a, [hl] 	; reverse low nibble
	or d
	;  76543210
	; %dddddddd
	ret

	.broken_packet
	xor a
	ret
; keyboard_packet_to_scan_code


; keyboard_scan_code_to_keycode
;
; If the return keycode is 0 this function needs to be called again
; with the new modifiers and keyboard state to get a scan code.
;
; input:
; - `a` : scan code
; - `b` : locking modifiers
; - `d` : modifiers
; - `e` : keyboard state
;
; returns:
; - `a` : keycode
; - `b` : locking modifiers
; - `d` : modifiers
; - `e` : keyboard state
;
; modifies `af`, `b`, `de`, `hl`
keyboard_scan_code_to_keycode:
	bit 7, a
	jr nz, .high_bit

	bit KEYBOARD_STATEB_EXTENDED, e
	jr z, .not_extended0
		set 7, a
	.not_extended0

	ld l, a
	ld h, high(keyboard_scan_code_set_2_to_keycode_table)
	ld a, [hl]

	bit 7, a
	jr nz, .key_modifier
	ret

	.high_bit
		cp $f0
		jr z, .key_up
		cp $e0
		jr z, .extended0
		cp $83
		jr z, .key_f7
		cp $e1
		jr z, .extended1
		xor a
		ret

	.key_f7
		ld a, KEY_F7
		ret

	.key_up
		set KEYBOARD_STATEB_KEY_UP, e
		xor a
		ret

	.extended0
		set KEYBOARD_STATEB_EXTENDED, e
		xor a
		ret

	.extended1
		ld a, e
		xor KEYBOARD_STATEF_EXTENDED1
		ld e, a
		xor a
		ret

	.key_modifier
		set KEYBOARD_STATEB_MODIFIER, e
		res KEYBOARD_STATEB_MODIFIER, a

		cp KEY_LEFTALT
		jr z, .key_alt
		cp KEY_LEFTSHIFT
		jr z, .key_shift
		cp KEY_LEFTCTRL
		jr z, .key_control
		cp KEY_CAPSLOCK
		jr z, .key_capslock
		cp KEY_RIGHTSHIFT
		jr z, .key_shift
		cp KEY_NUMLOCK
		jr z, .key_numlock
		cp KEY_SCROLLLOCK
		jr z, .key_scrolllock
		cp KEY_RIGHTALT
		jr z, .key_alt
		cp KEY_RIGHTCTRL
		jr z, .key_control
		cp KEY_LEFTMETA
		jr z, .key_meta
		cp KEY_RIGHTMETA
		jr z, .key_meta

		ret

	.key_alt
		bit KEYBOARD_STATEB_KEY_UP, e
		jr nz, .key_alt_up
			set KEY_MODIFIERB_ALT, d
			ret
		.key_alt_up
		res KEY_MODIFIERB_ALT, d
		ret

	.key_shift
		bit KEYBOARD_STATEB_KEY_UP, e
		jr nz, .key_shift_up
			set KEY_MODIFIERB_SHIFT, d
			ret
		.key_shift_up
		res KEY_MODIFIERB_SHIFT, d
		ret

	.key_control
		bit KEYBOARD_STATEB_KEY_UP, e
		jr nz, .key_control_up
			set KEY_MODIFIERB_CONTROL, d
			ret
		.key_control_up
		res KEY_MODIFIERB_CONTROL, d
		ret

	.key_capslock
		bit KEYBOARD_STATEB_KEY_UP, e
		jr nz, .key_capslock_up
			set KEY_MODIFIERB_CAPSLOCK, d
			ret
		.key_capslock_up
		bit KEY_MODIFIERB_CAPSLOCK, b
		jr nz, .key_capslock_res
			set KEY_MODIFIERB_CAPSLOCK, b
			ret
		.key_capslock_res
		res KEY_MODIFIERB_CAPSLOCK, b
		res KEY_MODIFIERB_CAPSLOCK, d
		ret

	.key_numlock
		bit KEYBOARD_STATEB_KEY_UP, e
		jr nz, .key_numlock_up
			set KEY_MODIFIERB_NUMLOCK, d
			ret
		.key_numlock_up
		bit KEY_MODIFIERB_NUMLOCK, b
		jr nz, .key_numlock_res
			set KEY_MODIFIERB_NUMLOCK, b
			ret
		.key_numlock_res
		res KEY_MODIFIERB_NUMLOCK, b
		res KEY_MODIFIERB_NUMLOCK, d
		ret

	.key_scrolllock
		bit KEYBOARD_STATEB_KEY_UP, e
		jr nz, .key_scrolllock_up
			set KEY_MODIFIERB_SCROLLLOCK, d
			ret
		.key_scrolllock_up
		bit KEY_MODIFIERB_SCROLLLOCK, b
		jr nz, .key_scrolllock_res
			set KEY_MODIFIERB_SCROLLLOCK, b
			ret
		.key_scrolllock_res
		res KEY_MODIFIERB_SCROLLLOCK, b
		res KEY_MODIFIERB_SCROLLLOCK, d
		ret

	.key_meta
		bit KEYBOARD_STATEB_KEY_UP, e
		jr nz, .key_meta_up
			set KEY_MODIFIERB_META, d
			ret
		.key_meta_up
		res KEY_MODIFIERB_META, d
		ret
; keyboard_scan_code_to_keycode


; keyboard_keycode_to_input_buffer_chars
;
; Converts a keycode into characters and writes the result to the input buffer.
;
; input:
; - `a` : keycode
; - `e` : modifiers
;
; modifies `af`, `d`, `hl`
keyboard_keycode_to_input_buffer_chars:
	bit 7, a
	ret nz

	ld d, a

	bit KEY_MODIFIERB_SHIFT, e
	jr z, .no_shift
		set 7, a
	.no_shift
	
	ld l, a
	ld h, high(keycode_base_case_to_ascii_table)
	ld a, [hl]

	inc a
	ret z 	; not a printable keycode
	dec a
	jr z, .keycode_sequence

	bit KEY_MODIFIERB_CONTROL, e
	jr z, .no_control
		; TODO : keys `, 2 to 8, -, ? and spacebar don't work quite as intended yet
		cp $7f
		jr nz, .not_backspace
			ld a, $08 ; "\b"
			jr .no_control
		.not_backspace

		sub "@"
		ret c

		cp " "
		jr c, .no_control
		sub "a" - "A"
		ret c
	.no_control
	
	bit KEY_MODIFIERB_CAPSLOCK, e
	jr z, .no_capslock
		cp "A"
		jr c, .no_capslock
		cp "Z" + 1
		jr nc, .not_upper
			add "a" - "A"
			jr .no_capslock
		.not_upper

		cp "a"
		jr c, .no_capslock
		cp "z" + 1
		jr nc, .not_lower
			sub "a" - "A"
		.not_lower
	.no_capslock
	
	; TODO
	; bit KEY_MODIFIERB_META, e
	; jr z, .no_meta
	; .no_meta

	; TODO
	; bit KEY_MODIFIERB_SCROLLLOCK, e
	; jr z, .no_scrolllock
	; .no_scrolllock

	bit KEY_MODIFIERB_ALT, e
	jr z, .no_alt
		INPUT_BUFFER_PUSH $1b ; "\e"
	.no_alt

	INPUT_BUFFER_PUSH a
	ret

	.keycode_sequence
		ld a, d

		cp KEY_TAB
		jp z, .keycode_sequence_tab
		cp KEY_F1
		jp z, .keycode_sequence_f1
		cp KEY_F2
		jp z, .keycode_sequence_f2
		cp KEY_F3
		jp z, .keycode_sequence_f3
		cp KEY_F4
		jp z, .keycode_sequence_f4
		cp KEY_F5
		jp z, .keycode_sequence_f5
		cp KEY_F6
		jp z, .keycode_sequence_f6
		cp KEY_F7
		jp z, .keycode_sequence_f7
		cp KEY_F8
		jp z, .keycode_sequence_f8
		cp KEY_F9
		jp z, .keycode_sequence_f9
		cp KEY_F10
		jp z, .keycode_sequence_f10
		cp KEY_KP7
		jp z, .keycode_sequence_kp7
		cp KEY_KP8
		jp z, .keycode_sequence_kp8
		cp KEY_KP9
		jp z, .keycode_sequence_kp9
		cp KEY_KP4
		jp z, .keycode_sequence_kp4
		cp KEY_KP5
		jp z, .keycode_sequence_kp5
		cp KEY_KP6
		jp z, .keycode_sequence_kp6
		cp KEY_KP1
		jp z, .keycode_sequence_kp1
		cp KEY_KP2
		jp z, .keycode_sequence_kp2
		cp KEY_KP3
		jp z, .keycode_sequence_kp3
		cp KEY_KP0
		jp z, .keycode_sequence_kp0
		cp KEY_KPDOT
		jp z, .keycode_sequence_kpdot
		cp KEY_F11
		jp z, .keycode_sequence_f11
		cp KEY_F12
		jp z, .keycode_sequence_f12
		cp KEY_HOME
		jp z, .keycode_sequence_home
		cp KEY_UP
		jp z, .keycode_sequence_up
		cp KEY_PAGEUP
		jp z, .keycode_sequence_pageup
		cp KEY_LEFT
		jp z, .keycode_sequence_left
		cp KEY_RIGHT
		jp z, .keycode_sequence_right
		cp KEY_END
		jp z, .keycode_sequence_end
		cp KEY_DOWN
		jp z, .keycode_sequence_down
		cp KEY_PAGEDOWN
		jp z, .keycode_sequence_pagedown
		cp KEY_INSERT
		jp z, .keycode_sequence_insert
		cp KEY_DELETE
		jp z, .keycode_sequence_delete

		DPUTS "keyboard_keycode_to_input_buffer_chars.keycode_sequence unhandled keycode: %A%"
		ret

	macro KEYCODE_SEQUENCE_SHORT
		static_assert fatal, !(BYTELEN(\1) != 1), "Invalid argument"
		ld d, \1
		jp .keycode_sequence_short
	endm

	macro KEYCODE_SEQUENCE_LONG
		if BYTELEN(\1) == 1
			xor a
			ld d, \1
		elif BYTELEN(\1) == 2
			ld a, STRBYTE(\1, 1)
			ld d, STRBYTE(\1, 0)
		else
			fail "Invalid argument"
		endc
		jp .keycode_sequence_long
	endm

	macro KEYCODE_SEQUENCE_KP
		static_assert fatal, !(BYTELEN(\1) != 1), "Invalid argument"
		bit KEY_MODIFIERB_NUMLOCK, e
		jr z, .no_numlock\@
			\2 \3
		.no_numlock\@
		INPUT_BUFFER_PUSH \1
		ret
	endm

	.keycode_sequence_tab
		INPUT_BUFFER_PUSH $1b ; "\e"
		INPUT_BUFFER_PUSH "\t"
		ret
		
	.keycode_sequence_f1
		KEYCODE_SEQUENCE_LONG "11"

	.keycode_sequence_f2
		KEYCODE_SEQUENCE_LONG "12"

	.keycode_sequence_f3
		KEYCODE_SEQUENCE_LONG "13"

	.keycode_sequence_f4
		KEYCODE_SEQUENCE_LONG "14"

	.keycode_sequence_f5
		KEYCODE_SEQUENCE_LONG "15"

	.keycode_sequence_f6
		KEYCODE_SEQUENCE_LONG "17"

	.keycode_sequence_f7
		KEYCODE_SEQUENCE_LONG "18"

	.keycode_sequence_f8
		KEYCODE_SEQUENCE_LONG "19"

	.keycode_sequence_f9
		KEYCODE_SEQUENCE_LONG "20"

	.keycode_sequence_f10
		KEYCODE_SEQUENCE_LONG "21"

	.keycode_sequence_kp7
		KEYCODE_SEQUENCE_KP "7", KEYCODE_SEQUENCE_LONG, "7"
		
	.keycode_sequence_kp8
		KEYCODE_SEQUENCE_KP "8", KEYCODE_SEQUENCE_SHORT, "A"

	.keycode_sequence_kp9
		KEYCODE_SEQUENCE_KP "9", KEYCODE_SEQUENCE_LONG, "5"

	.keycode_sequence_kp4
		KEYCODE_SEQUENCE_KP "4", KEYCODE_SEQUENCE_SHORT, "D"

	.keycode_sequence_kp5
		KEYCODE_SEQUENCE_KP "5", KEYCODE_SEQUENCE_SHORT, "G"

	.keycode_sequence_kp6
		KEYCODE_SEQUENCE_KP "6", KEYCODE_SEQUENCE_SHORT, "C"

	.keycode_sequence_kp1
		KEYCODE_SEQUENCE_KP "1", KEYCODE_SEQUENCE_LONG, "8"

	.keycode_sequence_kp2
		KEYCODE_SEQUENCE_KP "2", KEYCODE_SEQUENCE_SHORT, "B"

	.keycode_sequence_kp3
		KEYCODE_SEQUENCE_KP "3", KEYCODE_SEQUENCE_LONG, "6"

	.keycode_sequence_kp0
		KEYCODE_SEQUENCE_KP "0", KEYCODE_SEQUENCE_LONG, "2"

	.keycode_sequence_kpdot
		KEYCODE_SEQUENCE_KP ".", KEYCODE_SEQUENCE_LONG, "3"

	.keycode_sequence_f11
		KEYCODE_SEQUENCE_LONG "23"

	.keycode_sequence_f12
		KEYCODE_SEQUENCE_LONG "24"

	.keycode_sequence_home
		KEYCODE_SEQUENCE_LONG "1"
	
	.keycode_sequence_up
		KEYCODE_SEQUENCE_SHORT "A"
	
	.keycode_sequence_pageup
		KEYCODE_SEQUENCE_LONG "5"
	
	.keycode_sequence_left
		KEYCODE_SEQUENCE_SHORT "D"
	
	.keycode_sequence_right
		KEYCODE_SEQUENCE_SHORT "C"
	
	.keycode_sequence_end
		KEYCODE_SEQUENCE_LONG "4"
	
	.keycode_sequence_down
		KEYCODE_SEQUENCE_SHORT "B"
	
	.keycode_sequence_pagedown
		KEYCODE_SEQUENCE_LONG "6"
	
	.keycode_sequence_insert
		KEYCODE_SEQUENCE_LONG "2"
	
	.keycode_sequence_delete
		KEYCODE_SEQUENCE_LONG "3"

	.keycode_sequence_short
		INPUT_BUFFER_PUSH $1b ; "\e"
		INPUT_BUFFER_PUSH "["
		ld a, e
		and KEY_MODIFIERF_SHIFT | KEY_MODIFIERF_ALT | KEY_MODIFIERF_CONTROL | KEY_MODIFIERF_META
		jr z, .keycode_sequence_short_no_modifiers
			cp 10
			jr c, .keycode_sequence_short_modifiers_no_high_digit
				sub 10
				INPUT_BUFFER_PUSH "1"
			.keycode_sequence_short_modifiers_no_high_digit
			add "1"
			INPUT_BUFFER_PUSH a
		.keycode_sequence_short_no_modifiers
		INPUT_BUFFER_PUSH d
		ret

	.keycode_sequence_long
		INPUT_BUFFER_PUSH $1b ; "\e"
		INPUT_BUFFER_PUSH "["
		or a
		jr z, .keycode_sequence_long_empty_a
			INPUT_BUFFER_PUSH a
		.keycode_sequence_long_empty_a
		INPUT_BUFFER_PUSH d
		ld a, e
		and KEY_MODIFIERF_SHIFT | KEY_MODIFIERF_ALT | KEY_MODIFIERF_CONTROL | KEY_MODIFIERF_META
		jr z, .keycode_sequence_long_no_modifiers
			INPUT_BUFFER_PUSH ";"
			cp 10
			jr c, .keycode_sequence_long_modifiers_no_high_digit
				sub 10
				INPUT_BUFFER_PUSH "1"
			.keycode_sequence_long_modifiers_no_high_digit
			add "1"
			INPUT_BUFFER_PUSH a
		.keycode_sequence_long_no_modifiers
		INPUT_BUFFER_PUSH "~"
		ret
; keyboard_keycode_to_input_buffer_chars


section "keycode to ascii translation tables", romx, align[8]
keycode_base_case_to_ascii_table:
/* KEY_RESERVED          */ db  -1
/* KEY_ESC               */ db $1b  ; "\e"
/* KEY_1                 */ db  "1"
/* KEY_2                 */ db  "2"
/* KEY_3                 */ db  "3"
/* KEY_4                 */ db  "4"
/* KEY_5                 */ db  "5"
/* KEY_6                 */ db  "6"
/* KEY_7                 */ db  "7"
/* KEY_8                 */ db  "8"
/* KEY_9                 */ db  "9"
/* KEY_0                 */ db  "0"
/* KEY_MINUS             */ db  "-"
/* KEY_EQUAL             */ db  "="
/* KEY_BACKSPACE         */ db $7f
/* KEY_TAB               */ db "\t"
/* KEY_Q                 */ db  "q"
/* KEY_W                 */ db  "w"
/* KEY_E                 */ db  "e"
/* KEY_R                 */ db  "r"
/* KEY_T                 */ db  "t"
/* KEY_Y                 */ db  "y"
/* KEY_U                 */ db  "u"
/* KEY_I                 */ db  "i"
/* KEY_O                 */ db  "o"
/* KEY_P                 */ db  "p"
/* KEY_LEFTBRACE         */ db  "["
/* KEY_RIGHTBRACE        */ db  "]"
/* KEY_ENTER             */ db "\r"
/* KEY_LEFTCTRL          */ db  -1
/* KEY_A                 */ db  "a"
/* KEY_S                 */ db  "s"
/* KEY_D                 */ db  "d"
/* KEY_F                 */ db  "f"
/* KEY_G                 */ db  "g"
/* KEY_H                 */ db  "h"
/* KEY_J                 */ db  "j"
/* KEY_K                 */ db  "k"
/* KEY_L                 */ db  "l"
/* KEY_SEMICOLON         */ db  ";"
/* KEY_APOSTROPHE        */ db  "'"
/* KEY_GRAVE             */ db  "`"
/* KEY_LEFTSHIFT         */ db  -1
/* KEY_BACKSLASH         */ db "\\"
/* KEY_Z                 */ db  "z"
/* KEY_X                 */ db  "x"
/* KEY_C                 */ db  "c"
/* KEY_V                 */ db  "v"
/* KEY_B                 */ db  "b"
/* KEY_N                 */ db  "n"
/* KEY_M                 */ db  "m"
/* KEY_COMMA             */ db  ","
/* KEY_DOT               */ db  "."
/* KEY_SLASH             */ db  "/"
/* KEY_RIGHTSHIFT        */ db  -1
/* KEY_KPASTERISK        */ db  "*"
/* KEY_LEFTALT           */ db  -1
/* KEY_SPACE             */ db  " "
/* KEY_CAPSLOCK          */ db  -1
/* KEY_F1                */ db   0  ; "\e[11~"
/* KEY_F2                */ db   0  ; "\e[12~"
/* KEY_F3                */ db   0  ; "\e[13~"
/* KEY_F4                */ db   0  ; "\e[14~"
/* KEY_F5                */ db   0  ; "\e[15~"
/* KEY_F6                */ db   0  ; "\e[17~"
/* KEY_F7                */ db   0  ; "\e[18~"
/* KEY_F8                */ db   0  ; "\e[19~"
/* KEY_F9                */ db   0  ; "\e[20~"
/* KEY_F10               */ db   0  ; "\e[21~"
/* KEY_NUMLOCK           */ db  -1
/* KEY_SCROLLLOCK        */ db  -1
/* KEY_KP7               */ db   0  ; "7"
/* KEY_KP8               */ db   0  ; "8"
/* KEY_KP9               */ db   0  ; "9"
/* KEY_KPMINUS           */ db  "-"
/* KEY_KP4               */ db   0  ; "4"
/* KEY_KP5               */ db   0  ; "5"
/* KEY_KP6               */ db   0  ; "6"
/* KEY_KPPLUS            */ db  "+"
/* KEY_KP1               */ db   0  ; "1"
/* KEY_KP2               */ db   0  ; "2"
/* KEY_KP3               */ db   0  ; "3"
/* KEY_KP0               */ db   0  ; "0"
/* KEY_KPDOT             */ db   0  ; "."
/* 84                    */ db  -1
/* KEY_ZENKAKUHANKAKU    */ db  -1
/* KEY_102ND             */ db  -1
/* KEY_F11               */ db   0  ; "\e[23~"
/* KEY_F12               */ db   0  ; "\e[24~"
/* KEY_RO                */ db  -1
/* KEY_KATAKANA          */ db  -1
/* KEY_HIRAGANA          */ db  -1
/* KEY_HENKAN            */ db  -1
/* KEY_KATAKANAHIRAGANA  */ db  -1
/* KEY_MUHENKAN          */ db  -1
/* KEY_KPJPCOMMA         */ db  -1
/* KEY_KPENTER           */ db "\r"
/* KEY_RIGHTCTRL         */ db  -1
/* KEY_KPSLASH           */ db  "/"
/* KEY_SYSRQ             */ db  -1
/* KEY_RIGHTALT          */ db  -1
/* KEY_LINEFEED          */ db "\n"
/* KEY_HOME              */ db   0  ; "\e[1~"
/* KEY_UP                */ db   0  ; "\e[A"
/* KEY_PAGEUP            */ db   0  ; "\e[5~"
/* KEY_LEFT              */ db   0  ; "\e[D"
/* KEY_RIGHT             */ db   0  ; "\e[C"
/* KEY_END               */ db   0  ; "\e[4~"
/* KEY_DOWN              */ db   0  ; "\e[B"
/* KEY_PAGEDOWN          */ db   0  ; "\e[6~"
/* KEY_INSERT            */ db   0  ; "\e[2~"
/* KEY_DELETE            */ db   0  ; "\e[3~"
/* KEY_MACRO             */ db  -1
/* KEY_MUTE              */ db  -1
/* KEY_VOLUMEDOWN        */ db  -1
/* KEY_VOLUMEUP          */ db  -1
/* KEY_POWER             */ db  -1
/* KEY_KPEQUAL           */ db  "="
/* KEY_KPPLUSMINUS       */ db  -1
/* KEY_PAUSE             */ db  -1
/* KEY_SCALE             */ db  -1
/* KEY_KPCOMMA           */ db  ","
/* KEY_HANGEUL/HANGEUL   */ db  -1
/* KEY_HANJA             */ db  -1
/* KEY_YEN               */ db  -1
/* KEY_LEFTMETA          */ db  -1
/* KEY_RIGHTMETA         */ db  -1
/* KEY_COMPOSE           */ db  -1
keycode_base_case_to_ascii_table_end:
assert fail, (keycode_base_case_to_ascii_table_end - keycode_base_case_to_ascii_table == 128)

keycode_upper_case_to_ascii_table:
/* KEY_RESERVED          */ db  -1
/* KEY_ESC               */ db $1b  ; "\e"
/* KEY_1                 */ db  "!"
/* KEY_2                 */ db  "@"
/* KEY_3                 */ db  "#"
/* KEY_4                 */ db  "$"
/* KEY_5                 */ db  "%"
/* KEY_6                 */ db  "^"
/* KEY_7                 */ db  "&"
/* KEY_8                 */ db  "*"
/* KEY_9                 */ db  "("
/* KEY_0                 */ db  ")"
/* KEY_MINUS             */ db  "_"
/* KEY_EQUAL             */ db  "+"
/* KEY_BACKSPACE         */ db $7f
/* KEY_TAB               */ db   0  ; "\e\t"
/* KEY_Q                 */ db  "Q"
/* KEY_W                 */ db  "W"
/* KEY_E                 */ db  "E"
/* KEY_R                 */ db  "R"
/* KEY_T                 */ db  "T"
/* KEY_Y                 */ db  "Y"
/* KEY_U                 */ db  "U"
/* KEY_I                 */ db  "I"
/* KEY_O                 */ db  "O"
/* KEY_P                 */ db  "P"
/* KEY_LEFTBRACE         */ db "\{"
/* KEY_RIGHTBRACE        */ db "\}"
/* KEY_ENTER             */ db "\r"
/* KEY_LEFTCTRL          */ db  -1
/* KEY_A                 */ db  "A"
/* KEY_S                 */ db  "S"
/* KEY_D                 */ db  "D"
/* KEY_F                 */ db  "F"
/* KEY_G                 */ db  "G"
/* KEY_H                 */ db  "H"
/* KEY_J                 */ db  "J"
/* KEY_K                 */ db  "K"
/* KEY_L                 */ db  "L"
/* KEY_SEMICOLON         */ db  ":"
/* KEY_APOSTROPHE        */ db "\""
/* KEY_GRAVE             */ db  "~"
/* KEY_LEFTSHIFT         */ db  -1
/* KEY_BACKSLASH         */ db  "|"
/* KEY_Z                 */ db  "Z"
/* KEY_X                 */ db  "X"
/* KEY_C                 */ db  "C"
/* KEY_V                 */ db  "V"
/* KEY_B                 */ db  "B"
/* KEY_N                 */ db  "N"
/* KEY_M                 */ db  "M"
/* KEY_COMMA             */ db  "<"
/* KEY_DOT               */ db  ">"
/* KEY_SLASH             */ db  "?"
/* KEY_RIGHTSHIFT        */ db  -1
/* KEY_KPASTERISK        */ db  "*"
/* KEY_LEFTALT           */ db  -1
/* KEY_SPACE             */ db  " "
/* KEY_CAPSLOCK          */ db  -1
/* KEY_F1                */ db   0  ; "\e[11;2~"
/* KEY_F2                */ db   0  ; "\e[12;2~"
/* KEY_F3                */ db   0  ; "\e[13;2~"
/* KEY_F4                */ db   0  ; "\e[14;2~"
/* KEY_F5                */ db   0  ; "\e[15;2~"
/* KEY_F6                */ db   0  ; "\e[17;2~"
/* KEY_F7                */ db   0  ; "\e[18;2~"
/* KEY_F8                */ db   0  ; "\e[19;2~"
/* KEY_F9                */ db   0  ; "\e[20;2~"
/* KEY_F10               */ db   0  ; "\e[21;2~"
/* KEY_NUMLOCK           */ db  -1
/* KEY_SCROLLLOCK        */ db  -1
/* KEY_KP7               */ db   0  ; "\e[7~"
/* KEY_KP8               */ db   0  ; "\e[A"
/* KEY_KP9               */ db   0  ; "\e[5~"
/* KEY_KPMINUS           */ db  "-"
/* KEY_KP4               */ db   0  ; "\e[D"
/* KEY_KP5               */ db   0  ; "\e[G"
/* KEY_KP6               */ db   0  ; "\e[C"
/* KEY_KPPLUS            */ db  "+"
/* KEY_KP1               */ db   0  ; "\e[8~"
/* KEY_KP2               */ db   0  ; "\e[B"
/* KEY_KP3               */ db   0  ; "\e[6~"
/* KEY_KP0               */ db   0  ; "\e[2~"
/* KEY_KPDOT             */ db   0  ; "\e[3~"
/* 84                    */ db  -1
/* KEY_ZENKAKUHANKAKU    */ db  -1
/* KEY_102ND             */ db  -1
/* KEY_F11               */ db   0  ; "\e[23;2~"
/* KEY_F12               */ db   0  ; "\e[24;2~"
/* KEY_RO                */ db  -1
/* KEY_KATAKANA          */ db  -1
/* KEY_HIRAGANA          */ db  -1
/* KEY_HENKAN            */ db  -1
/* KEY_KATAKANAHIRAGANA  */ db  -1
/* KEY_MUHENKAN          */ db  -1
/* KEY_KPJPCOMMA         */ db  -1
/* KEY_KPENTER           */ db "\r"
/* KEY_RIGHTCTRL         */ db  -1
/* KEY_KPSLASH           */ db  "/"
/* KEY_SYSRQ             */ db  -1
/* KEY_RIGHTALT          */ db  -1
/* KEY_LINEFEED          */ db "\n"
/* KEY_HOME              */ db   0  ; "\e[1;2~"
/* KEY_UP                */ db   0  ; "\e[1;2A"
/* KEY_PAGEUP            */ db   0  ; "\e[5;2~"
/* KEY_LEFT              */ db   0  ; "\e[1;2D"
/* KEY_RIGHT             */ db   0  ; "\e[1;2C"
/* KEY_END               */ db   0  ; "\e[4;2~"
/* KEY_DOWN              */ db   0  ; "\e[1;2B"
/* KEY_PAGEDOWN          */ db   0  ; "\e[6;2~"
/* KEY_INSERT            */ db   0  ; "\e[2;2~"
/* KEY_DELETE            */ db   0  ; "\e[3;2~"
/* KEY_MACRO             */ db  -1
/* KEY_MUTE              */ db  -1
/* KEY_VOLUMEDOWN        */ db  -1
/* KEY_VOLUMEUP          */ db  -1
/* KEY_POWER             */ db  -1
/* KEY_KPEQUAL           */ db  "="
/* KEY_KPPLUSMINUS       */ db  -1
/* KEY_PAUSE             */ db  -1
/* KEY_SCALE             */ db  -1
/* KEY_KPCOMMA           */ db  ","
/* KEY_HANGEUL/HANGEUL   */ db  -1
/* KEY_HANJA             */ db  -1
/* KEY_YEN               */ db  -1
/* KEY_LEFTMETA          */ db  -1
/* KEY_RIGHTMETA         */ db  -1
/* KEY_COMPOSE           */ db  -1
keycode_upper_case_to_ascii_table_end:
assert fail, (keycode_upper_case_to_ascii_table_end - keycode_upper_case_to_ascii_table == 128)

section "keyboard scan code set 2 to keycode translation tables", romx, align[8]
keyboard_scan_code_set_2_to_keycode_table:
; https://wiki.osdev.org/PS/2_Keyboard#Scan_Code_Set_2
; https://www.vetra.com/scancodes.html
/* $00 */ db KEY_RESERVED
/* $01 */ db KEY_F9
/* $02 */ db KEY_RESERVED
/* $03 */ db KEY_F5
/* $04 */ db KEY_F3
/* $05 */ db KEY_F1
/* $06 */ db KEY_F2
/* $07 */ db KEY_F12
/* $08 */ db KEY_RESERVED
/* $09 */ db KEY_F10
/* $0a */ db KEY_F8
/* $0b */ db KEY_F6
/* $0c */ db KEY_F4
/* $0d */ db KEY_TAB
/* $0e */ db KEY_GRAVE
/* $0f */ db KEY_RESERVED
	
/* $10 */ db KEY_RESERVED
/* $11 */ db KEY_LEFTALT 			| KEYBOARD_STATEF_MODIFIER
/* $12 */ db KEY_LEFTSHIFT 			| KEYBOARD_STATEF_MODIFIER
/* $13 */ db KEY_RESERVED
/* $14 */ db KEY_LEFTCTRL 			| KEYBOARD_STATEF_MODIFIER
/* $15 */ db KEY_Q
/* $16 */ db KEY_1
/* $17 */ db KEY_RESERVED
/* $18 */ db KEY_RESERVED
/* $19 */ db KEY_RESERVED
/* $1a */ db KEY_Z
/* $1b */ db KEY_S
/* $1c */ db KEY_A
/* $1d */ db KEY_W
/* $1e */ db KEY_2
/* $1f */ db KEY_RESERVED
	
/* $20 */ db KEY_RESERVED
/* $21 */ db KEY_C
/* $22 */ db KEY_X
/* $23 */ db KEY_D
/* $24 */ db KEY_E
/* $25 */ db KEY_4
/* $26 */ db KEY_3
/* $27 */ db KEY_RESERVED
/* $28 */ db KEY_RESERVED
/* $29 */ db KEY_SPACE
/* $2a */ db KEY_V
/* $2b */ db KEY_F
/* $2c */ db KEY_T
/* $2d */ db KEY_R
/* $2e */ db KEY_5
/* $2f */ db KEY_RESERVED
	
/* $30 */ db KEY_RESERVED
/* $31 */ db KEY_N
/* $32 */ db KEY_B
/* $33 */ db KEY_H
/* $34 */ db KEY_G
/* $35 */ db KEY_Y
/* $36 */ db KEY_6
/* $37 */ db KEY_RESERVED
/* $38 */ db KEY_RESERVED
/* $39 */ db KEY_RESERVED
/* $3a */ db KEY_M
/* $3b */ db KEY_J
/* $3c */ db KEY_U
/* $3d */ db KEY_7
/* $3e */ db KEY_8
/* $3f */ db KEY_RESERVED
	
/* $40 */ db KEY_RESERVED
/* $41 */ db KEY_COMMA
/* $42 */ db KEY_K
/* $43 */ db KEY_I
/* $44 */ db KEY_O
/* $45 */ db KEY_0
/* $46 */ db KEY_9
/* $47 */ db KEY_RESERVED
/* $48 */ db KEY_RESERVED
/* $49 */ db KEY_DOT
/* $4a */ db KEY_SLASH
/* $4b */ db KEY_L
/* $4c */ db KEY_SEMICOLON
/* $4d */ db KEY_P
/* $4e */ db KEY_MINUS
/* $4f */ db KEY_RESERVED
	
/* $50 */ db KEY_RESERVED
/* $51 */ db KEY_RESERVED
/* $52 */ db KEY_APOSTROPHE
/* $53 */ db KEY_RESERVED
/* $54 */ db KEY_LEFTBRACE
/* $55 */ db KEY_EQUAL
/* $56 */ db KEY_RESERVED
/* $57 */ db KEY_RESERVED
/* $58 */ db KEY_CAPSLOCK 			| KEYBOARD_STATEF_MODIFIER
/* $59 */ db KEY_RIGHTSHIFT 		| KEYBOARD_STATEF_MODIFIER
/* $5a */ db KEY_ENTER
/* $5b */ db KEY_RIGHTBRACE
/* $5c */ db KEY_RESERVED
/* $5d */ db KEY_BACKSLASH
/* $5e */ db KEY_RESERVED
/* $5f */ db KEY_RESERVED
	
/* $60 */ db KEY_RESERVED
/* $61 */ db KEY_RESERVED
/* $62 */ db KEY_RESERVED
/* $63 */ db KEY_RESERVED
/* $64 */ db KEY_RESERVED
/* $65 */ db KEY_RESERVED
/* $66 */ db KEY_BACKSPACE
/* $67 */ db KEY_RESERVED
/* $68 */ db KEY_RESERVED
/* $69 */ db KEY_KP1
/* $6a */ db KEY_RESERVED
/* $6b */ db KEY_KP4
/* $6c */ db KEY_KP7
/* $6d */ db KEY_RESERVED
/* $6e */ db KEY_RESERVED
/* $6f */ db KEY_RESERVED
	
/* $70 */ db KEY_KP0
/* $71 */ db KEY_KPDOT
/* $72 */ db KEY_KP2
/* $73 */ db KEY_KP5
/* $74 */ db KEY_KP6
/* $75 */ db KEY_KP8
/* $76 */ db KEY_ESC
/* $77 */ db KEY_NUMLOCK 			| KEYBOARD_STATEF_MODIFIER
/* $78 */ db KEY_F11
/* $79 */ db KEY_KPPLUS
/* $7a */ db KEY_KP3
/* $7b */ db KEY_KPMINUS
/* $7c */ db KEY_KPASTERISK
/* $7d */ db KEY_KP9
/* $7e */ db KEY_SCROLLLOCK 		| KEYBOARD_STATEF_MODIFIER
/* $7f */ db KEY_RESERVED
keyboard_scan_code_set_2_to_keycode_table_end:
/* $83 */ ;  KEY_F7
assert fail, (keyboard_scan_code_set_2_to_keycode_table_end - keyboard_scan_code_set_2_to_keycode_table == 128)

keyboard_scan_code_extended_set_2_to_keycode_table:
/* $e0 $00 */ db KEY_RESERVED
/* $e0 $01 */ db KEY_RESERVED
/* $e0 $02 */ db KEY_RESERVED
/* $e0 $03 */ db KEY_RESERVED
/* $e0 $04 */ db KEY_RESERVED
/* $e0 $05 */ db KEY_RESERVED
/* $e0 $06 */ db KEY_RESERVED
/* $e0 $07 */ db KEY_RESERVED
/* $e0 $08 */ db KEY_RESERVED
/* $e0 $09 */ db KEY_RESERVED
/* $e0 $0a */ db KEY_RESERVED
/* $e0 $0b */ db KEY_RESERVED
/* $e0 $0c */ db KEY_RESERVED
/* $e0 $0d */ db KEY_RESERVED
/* $e0 $0e */ db KEY_RESERVED
/* $e0 $0f */ db KEY_RESERVED
	
/* $e0 $10 */ db KEY_RESERVED ; (multimedia) WWW search
/* $e0 $11 */ db KEY_RIGHTALT 		| KEYBOARD_STATEF_MODIFIER
/* $e0 $12 */ db KEY_RESERVED
/* $e0 $13 */ db KEY_RESERVED
/* $e0 $14 */ db KEY_RIGHTCTRL 		| KEYBOARD_STATEF_MODIFIER
/* $e0 $15 */ db KEY_RESERVED ; (multimedia) previous track
/* $e0 $16 */ db KEY_RESERVED
/* $e0 $17 */ db KEY_RESERVED
/* $e0 $18 */ db KEY_RESERVED ; (multimedia) WWW favourites
/* $e0 $19 */ db KEY_RESERVED
/* $e0 $1a */ db KEY_RESERVED
/* $e0 $1b */ db KEY_RESERVED
/* $e0 $1c */ db KEY_RESERVED
/* $e0 $1d */ db KEY_RESERVED
/* $e0 $1e */ db KEY_RESERVED
/* $e0 $1f */ db KEY_LEFTMETA 		| KEYBOARD_STATEF_MODIFIER
	
/* $e0 $20 */ db KEY_RESERVED ; (multimedia) WWW refresh
/* $e0 $21 */ db KEY_VOLUMEDOWN
/* $e0 $22 */ db KEY_RESERVED
/* $e0 $23 */ db KEY_MUTE
/* $e0 $24 */ db KEY_RESERVED
/* $e0 $25 */ db KEY_RESERVED
/* $e0 $26 */ db KEY_RESERVED
/* $e0 $27 */ db KEY_COMPOSE
/* $e0 $28 */ db KEY_RESERVED ; (multimedia) WWW stop
/* $e0 $29 */ db KEY_RESERVED
/* $e0 $2a */ db KEY_RESERVED
/* $e0 $2b */ db KEY_RESERVED ; (multimedia) calculator
/* $e0 $2c */ db KEY_RESERVED
/* $e0 $2d */ db KEY_RESERVED
/* $e0 $2e */ db KEY_RESERVED
/* $e0 $2f */ db KEY_RIGHTMETA 		| KEYBOARD_STATEF_MODIFIER
	
/* $e0 $30 */ db KEY_RESERVED ; (multimedia) WWW forward
/* $e0 $31 */ db KEY_RESERVED
/* $e0 $32 */ db KEY_VOLUMEUP
/* $e0 $33 */ db KEY_RESERVED
/* $e0 $34 */ db KEY_RESERVED ; (multimedia) play/pause
/* $e0 $35 */ db KEY_RESERVED
/* $e0 $36 */ db KEY_RESERVED
/* $e0 $37 */ db KEY_RESERVED ; (ACPI) power
/* $e0 $38 */ db KEY_RESERVED ; (multimedia) WWW back
/* $e0 $39 */ db KEY_RESERVED
/* $e0 $3a */ db KEY_RESERVED ; (multimedia) WWW home
/* $e0 $3b */ db KEY_RESERVED ; (multimedia) stop
/* $e0 $3c */ db KEY_RESERVED
/* $e0 $3d */ db KEY_RESERVED
/* $e0 $3e */ db KEY_RESERVED
/* $e0 $3f */ db KEY_RESERVED ; (ACPI) sleep
	
/* $e0 $40 */ db KEY_RESERVED ; (multimedia) my computer
/* $e0 $41 */ db KEY_RESERVED
/* $e0 $42 */ db KEY_RESERVED
/* $e0 $43 */ db KEY_RESERVED
/* $e0 $44 */ db KEY_RESERVED
/* $e0 $45 */ db KEY_RESERVED
/* $e0 $46 */ db KEY_RESERVED
/* $e0 $47 */ db KEY_RESERVED
/* $e0 $48 */ db KEY_RESERVED ; (multimedia) email
/* $e0 $49 */ db KEY_RESERVED
/* $e0 $4a */ db KEY_KPSLASH
/* $e0 $4b */ db KEY_RESERVED
/* $e0 $4c */ db KEY_RESERVED
/* $e0 $4d */ db KEY_RESERVED ; (multimedia) next track
/* $e0 $4e */ db KEY_RESERVED
/* $e0 $4f */ db KEY_RESERVED
	
/* $e0 $50 */ db KEY_RESERVED ; (multimedia) media select
/* $e0 $51 */ db KEY_RESERVED
/* $e0 $52 */ db KEY_RESERVED
/* $e0 $53 */ db KEY_RESERVED
/* $e0 $54 */ db KEY_RESERVED
/* $e0 $55 */ db KEY_RESERVED
/* $e0 $56 */ db KEY_RESERVED
/* $e0 $57 */ db KEY_RESERVED
/* $e0 $58 */ db KEY_RESERVED
/* $e0 $59 */ db KEY_RESERVED
/* $e0 $5a */ db KEY_KPENTER
/* $e0 $5b */ db KEY_RESERVED
/* $e0 $5c */ db KEY_RESERVED
/* $e0 $5d */ db KEY_RESERVED
/* $e0 $5e */ db KEY_RESERVED ; (ACPI) wake
/* $e0 $5f */ db KEY_RESERVED
	
/* $e0 $60 */ db KEY_RESERVED
/* $e0 $61 */ db KEY_RESERVED
/* $e0 $62 */ db KEY_RESERVED
/* $e0 $63 */ db KEY_RESERVED
/* $e0 $64 */ db KEY_RESERVED
/* $e0 $65 */ db KEY_RESERVED
/* $e0 $66 */ db KEY_RESERVED
/* $e0 $67 */ db KEY_RESERVED
/* $e0 $68 */ db KEY_RESERVED
/* $e0 $69 */ db KEY_END
/* $e0 $6a */ db KEY_RESERVED
/* $e0 $6b */ db KEY_LEFT
/* $e0 $6c */ db KEY_HOME
/* $e0 $6d */ db KEY_RESERVED
/* $e0 $6e */ db KEY_RESERVED
/* $e0 $6f */ db KEY_RESERVED
	
/* $e0 $70 */ db KEY_INSERT
/* $e0 $71 */ db KEY_DELETE
/* $e0 $72 */ db KEY_DOWN
/* $e0 $73 */ db KEY_RESERVED
/* $e0 $74 */ db KEY_RIGHT
/* $e0 $75 */ db KEY_UP
/* $e0 $76 */ db KEY_RESERVED
/* $e0 $77 */ db KEY_RESERVED
/* $e0 $78 */ db KEY_RESERVED
/* $e0 $79 */ db KEY_RESERVED
/* $e0 $7a */ db KEY_PAGEDOWN
/* $e0 $7b */ db KEY_RESERVED
/* $e0 $7c */ db KEY_RESERVED
/* $e0 $7d */ db KEY_PAGEUP
/* $e0 $7e */ db KEY_RESERVED
/* $e0 $7f */ db KEY_RESERVED
keyboard_scan_code_extended_set_2_to_keycode_table_end:
/* $e0 $12 $e0 $7c */ ; KEY_SYSRQ ; print screen
/* $e1 $14 $77 $e1 $f0 $14 $f0 $77 */ ; KEY_PAUSE
assert fail, (keyboard_scan_code_extended_set_2_to_keycode_table_end - keyboard_scan_code_extended_set_2_to_keycode_table == 128)