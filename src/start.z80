include "hardware.inc"
include "macros.inc"
include "cursor.inc"
include "char.inc"
include "input.inc"
include "debug.inc"

export hex_map

export _hardware
export frame_count

export on_button_down
export on_button_up
export on_button_held
export on_button_repeat

section "STAT interrupt", ROM0[INT_HANDLER_STAT] ; max 8 bytes
reti

section "Timer Overflow interrupt", ROM0[INT_HANDLER_TIMER] ; max 8 bytes
reti

section "Joypad interrupt", ROM0[INT_HANDLER_JOYPAD] ; max 8 bytes
reti

section "start", ROM0[$0100]
	di
	jp init

rept $150 - $104
	db 0 
endr

section "global data", ROMX, align[8] ; aligned for easy access of hex_map
hex_map: 			db "0123456789ABCDEF"

section "global variables", wramx
_hardware:					ds 1 ; 0 = dmg, 1 = cgb, 2 = gba

section "init", ROMX
init:
	; hardware detection
	cp BOOTUP_A_CGB
	jr z, .cgb_compatible
		xor a ; dmg
		jr .hardware_detection_end
	.cgb_compatible

	bit 0, b
	jr z, .cgb
		ld a, 2 ; gba
		jr .hardware_detection_end

	.cgb
	ld a, 1 ; cgb

	.hardware_detection_end
	ld [_hardware], a

soft_init:
	call wait_vblank ; screen can only be turned off while in vblank
	
	xor a
	ld [rLCDC], a

	; shut sound down
	ld [rNR52], a

	ld a, [_hardware]
	or a
	jr z, .dmg_speed
		; speed switch routine
		ld a, %00000001
		ld [rKEY1], a
		stop
	.dmg_speed

	; populate ram
	
	call init_screen_mem
	call init_joypad_mem
	call init_input_mem
	call init_vblank_mem
	call init_cursor_mem
	call init_character_mem

	; end of ram population

	; init display registers
	ld a, [_hardware]
	or a
	jr nz, .cgb_compatible_palette
		; background palette
		ld a, %11100100
		ld [rBGP], a

		; object palettes
		; obj palette 0 for black, obj palette 1 for white
		ld [rOBP0], a
		ld a, %00100111
		ld [rOBP1], a
		jr .end_dmg_palette
	
	.cgb_compatible_palette
		; background palette
		ld a, BCPSF_AUTOINC
		ld [rBCPS], a
		
		; color 0 BGP0
		ld a, %11111111
		ld [rBCPD], a
		ld a, %1111111
		ld [rBCPD], a
		
		; color 1 BGP0
		ld a, %10110101
		ld [rBCPD], a
		ld a, %1010110
		ld [rBCPD], a
		
		; color 2 BGP0
		ld a, %01001010
		ld [rBCPD], a
		ld a, %0101001
		ld [rBCPD], a
		
		; color 3 BGP0
		ld a, %00000000
		ld [rBCPD], a
		ld a, %0000000
		ld [rBCPD], a
		
		; object palettes
		ld a, OCPSF_AUTOINC
		ld [rOCPS], a

		; color 0 OBP0
		ld a, %11111111
		ld [rOCPD], a
		ld a, %1111111
		ld [rOCPD], a

		; color 1 OBP0
		ld a, %10110101
		ld [rOCPD], a
		ld a, %1010110
		ld [rOCPD], a

		; color 2 OBP0
		ld a, %01001010
		ld [rOCPD], a
		ld a, %0101001
		ld [rOCPD], a

		; color 3 OBP0
		ld a, %00000000
		ld [rOCPD], a
		ld a, %0000000
		ld [rOCPD], a

	.end_dmg_palette

	xor a
	
	ld [rSCY], a
	ld [rSCX], a

	ld [rWY], a ; WY_OFS
	ld a, WX_OFS
	ld [rWX], a

	; turn screen on, display background and objects
	ld a, LCDCF_ON | LCDCF_BG8000 | LCDCF_BGON | LCDCF_OBJON
	ld [rLCDC], a

	xor a
	ld [rIF], a

	ld a, IEF_VBLANK | IEF_SERIAL
	ld [rIE], a

	ld a, SCF_START
	ld [rSC], a

	ei
	call _main

	.getchar
		call getchar

		cp "\r"
		jr nz, .not_cr
			ld a, "\n"
		.not_cr
		cp $7f
		jr nz, .not_delete
			ld a, $08
		.not_delete

		call putchar
		call cursor_reset_blink
	jr .getchar

; TODO: TEST
; value_on_screen
;
; input 
; - `a` : value
; - `hl` : destination
;
; destroys `af`, `bc`, `de`, `hl`
value_on_screen:
	ld c, $0f
	ld d, HIGH(hex_map)
	ld b, a

	swap a
	and c
	ld e, a
	ld a, [de]
	ld [hli], a

	ld a, b
	and c
	ld e, a
	ld a, [de]
	ld [hl], a
	ret
; value_on_screen

; on_button_down
on_button_down:
	call cursor_reset_blink

	bit PADB_SELECT, b
	jr z, .no_button_select

		ld a, [frame_count]
		ld [rSB], a

		ld a, SCF_START | SCF_SOURCE
		ld [rSC], a

		ld a, [frame_count]
		ld d, 0
		ld e, a

		PRINTF "\rByte out: %c %x %d\n", de, de, de

		DPUTS "send serial byte"
	
	.no_button_select

	ret 
; on_button_down

; on_button_up
on_button_up:
	bit PADB_START, b
	jr z, .no_button_start
		di
		ld sp, $fffe
		jp soft_init
	.no_button_start
	ret 
; on_button_up

; on_button_held
on_button_held:
	bit PADB_A, b
	jr z, .no_button_a
		push bc
		ld a, "A"
		call putchar
		pop bc
	.no_button_a
	
	bit PADB_B, b
	jr z, .no_button_b
		push bc
		ld a, " "
		call putchar
		pop bc
	.no_button_b

	ret 
; on_button_held

; on_button_repeat
on_button_repeat:
	call cursor_reset_blink

	bit PADB_LEFT, b
	jr z, .no_button_left
		ld hl, cursor_x
		dec [hl]
	.no_button_left
	
	bit PADB_RIGHT, b
	jr z, .no_button_right
		ld hl, cursor_x
		inc [hl]
	.no_button_right

	bit PADB_UP, b
	jr z, .no_button_up
		ld hl, cursor_y
		dec [hl]
	.no_button_up
	
	bit PADB_DOWN, b
	jr z, .no_button_down
		ld hl, cursor_y
		inc [hl]
	.no_button_down

	ret
; on_button_repeat