;--------------------------------------------------------
; File Created by SDCC : free open source ISO C Compiler 
; Version 4.4.0 #14620 (Linux)
;--------------------------------------------------------
	; MODULE main
	; Generated using the rgbds tokens.

;--------------------------------------------------------
; Public variables in this module
;--------------------------------------------------------
	EXPORT _main
	EXPORT _puts
;--------------------------------------------------------
; special function registers
;--------------------------------------------------------
;--------------------------------------------------------
; ram data
;--------------------------------------------------------
	SECTION FRAGMENT "src/main.c_DATA",WRAMX
;--------------------------------------------------------
; ram data
;--------------------------------------------------------
	SECTION FRAGMENT "_INITIALIZED",ROM0
;--------------------------------------------------------
; absolute external ram data
;--------------------------------------------------------
	SECTION FRAGMENT "_DABS (ABS)",ROM0
;--------------------------------------------------------
; global & static initialisations
;--------------------------------------------------------
	SECTION FRAGMENT "_HOME",ROM0
	SECTION FRAGMENT "_GSINIT",ROM0
	SECTION FRAGMENT "_GSFINAL",ROM0
	SECTION FRAGMENT "_GSINIT",ROM0
;--------------------------------------------------------
; Home
;--------------------------------------------------------
	SECTION FRAGMENT "src/main.c_HOME",ROM0
	SECTION FRAGMENT "src/main.c_HOME",ROM0
;--------------------------------------------------------
; code
;--------------------------------------------------------
	SECTION FRAGMENT "src/main.c_CODE",ROMX
;src/main.c:12: void main(void)
;	---------------------------------
; Function main
; ---------------------------------
_main::
;src/main.c:22: puts("Line 7: Scroll\ntest");
	ld	de, ___str_20
	call	_puts
;src/main.c:24: switch (hardware)
	ld	hl, _hardware
	ld	a, [hl]
	or	a, a
	jr	Z, .l00101
.l00129:
	cp	a, $01
	jr	Z, .l00102
.l00130:
	sub	a, $02
	jr	Z, .l00103
.l00131:
	jr	.l00104
;src/main.c:26: case 0:
.l00101:
;src/main.c:27: puts("Line 8: DMG system");
;src/main.c:28: break;
	ld	de, ___str_9
	jp	_puts
;src/main.c:29: case 1:
.l00102:
;src/main.c:30: puts("Line 8: CGB system");
;src/main.c:31: break;
	ld	de, ___str_10
	jp	_puts
;src/main.c:32: case 2:
.l00103:
;src/main.c:33: puts("Line 8: AGB system");
;src/main.c:34: break;
	ld	de, ___str_11
	jp	_puts
;src/main.c:35: default:
.l00104:
;src/main.c:36: puts("Line 8: Unknown system");
	ld	de, ___str_12
	jp	_puts
;src/main.c:38: }
.l00106:
;src/main.c:39: }
	ret
___str_9:
	DB "Line 8: DMG system"
	DB $00
___str_10:
	DB "Line 8: CGB system"
	DB $00
___str_11:
	DB "Line 8: AGB system"
	DB $00
___str_12:
	DB "Line 8: Unknown system"
	DB $00
___str_20:
	DB "Hello, world!"
	DB $0A
	DB "Line 2: Line feed"
	DB $0A
	DB "test"
	DB $0A
	DB "Not line 4: "
	DB $0D
	DB "Line 3: Carriage return test"
	DB $0A
	DB "Not"
	DB $08
	DB $08
	DB $08
	DB $08
	DB $08
	DB $08
	DB "Line 4: Backspace test"
	DB $0A
	DB "Line 5:"
	DB $09
	DB "Tab tests"
	DB $09
	DB $09
	DB "!"
	DB $09
	DB "1234567"
	DB $09
	DB "t"
	DB $0A
	DB "1234567"
	DB $09
	DB "1234567"
	DB $09
	DB "123"
	DB $09
	DB "test"
	DB $0A
	DB "1234567"
	DB $09
	DB "1234567"
	DB $09
	DB "1"
	DB $09
	DB $09
	DB $09
	DB $09
	DB "test"
	DB $0A
	DB "Line 6: "
	DB $0B
	DB "Vertical tab test"
	DB $0A
	DB "Line 7: Scroll"
	DB $0A
	DB "test"
	DB $00
	SECTION FRAGMENT "src/main.c_CODE",ROMX
	SECTION FRAGMENT "_INITIALIZER",ROM0
	SECTION FRAGMENT "_CABS (ABS)",ROM0
